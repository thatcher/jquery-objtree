
h1. XML.ObjTree -- XML source code from/to JavaScript object like E4X

<pre><code>
    var tree1 = {
        root: {
            node: "Hello, World!"
        }
    };
    var xml1 = $.js2xml( tree1 );        // object tree to XML source
    alert( "xml1: "+xml1 );

    var xml2 = '<?xml version="1.0"?><response><error>0</error></response>';
    var tree2 = $.xml2js( xml2 );        // XML source to object tree
    alert( "error: "+tree2.response.error );
</code></pre>

jquery-objtree is a thin wrapper around a slightly modified XML.ObjTree class (which
is a parser/generater between XML source code and JavaScript object like E4X, ECMAScript for XML).

h2. JavaScript object tree format

A sample XML source:
<pre><code>
    <?xml version="1.0" encoding="UTF-8"?>
    <family name="Kawasaki">
        <father>Yasuhisa</father>
        <mother>Chizuko</mother>
        <children>
            <girl>Shiori</girl>
            <boy>Yusuke</boy>
            <boy>Kairi</boy>
        </children>
    </family>
</code></pre>

Its JavaScript object tree like JSON/E4X:
<pre><code>
    {
        'family': {
            '$name':    'Kawasaki',
            'father':   'Yasuhisa',
            'mother':   'Chizuko',
            'children': {
                'girl': 'Shiori'
                'boy': [
                    'Yusuke',
                    'Kairi'
                ]
            }
        }
    };
</code></pre>

* Each elements are parsed into objects:
** <pre><code>tree.family.father;             # the father's given name.</code></pre>

* Prefix '4' is inserted before every attributes' name.
** <pre><code>tree.family.$name;           # this family's family name</code></pre>

* A array is used because this family has two boys.
** <pre><code>tree.family.children.boy[0];    # first boy's name</code></pre>
** <pre><code>tree.family.children.boy[1];    # second boy's name</code></pre>
** <pre><code>tree.family.children.girl;      # (girl has no other sisiters)</code></pre>

h2. CONFIGURATION OPTIONS

The options may either be set globally by using $.objtree() static method on the jQuery namespace.
The options for configuring are given below.

h3. opts.force_array = [ "rdf$li", "item", "$xmlns" ];

This property allows you to specify a list of element names
which should always be forced into an array representation.
The default value is null, it means that context of the elements
will determine to make array or to keep it scalar.

h3. opts.attr_prefix = '$';

This property allows you to specify a prefix character which is
inserted before each attribute names.
The default character is '$'.
Or set '@' to access attribute values like E4X, ECMAScript for XML.
The length of attr_prefix must be just one character and not be empty.

h3. opts.ns_colon = '$';

This property allows you to specify a  character which is
replaced as the namespace colon on each xml name.
The default character is '$'.
The length of ns_colon must be just one character and not be empty.

h3. xotree.xmlDecl = '';

This library generates an XML declaration on writing an XML code per default.
This property forces to change or leave it empty.

h2. METHODS

h3. tree = $.xml2js( xmlsrc );

This method loads an XML document using the supplied string
and returns its JavaScript object converted.

h3. tree = $.dom2js( domnode );

This method parses a DOM tree (ex. responseXML.documentElement)
and returns its JavaScript object converted.

h3. xmlsrc = xotree.xml2js( tree );

This method parses a JavaScript object tree
and returns its XML source generated.

h2. EXAMPLES

h3. Text node and attributes

If a element has both of a text node and attributes
or both of a text node and other child nodes,
text node's value is moved to a special node named "#text".

<code><pre>
    var xotree = new XML.ObjTree();
    var xmlsrc = '<span class="author">Kawasaki Yusuke</span>';
    var tree = xotree.parseXML( xmlsrc );
    var class = tree.span.$class;        # attribute
    var name  = tree.span["#text"];         # text node
</code></pre>


h3. Simple RSS reader

This is a RSS reader which loads RDF file and displays all items.
<code><pre>
    var xotree = new XML.ObjTree();
    xotree.;
    $.ajax({
        type:"GET",
        url : "http://example.com/news-rdf.xml",
        success : function( xml ) {
            var tree = $.dom2js(xml, {
                force_array : [ "rdf$li", "item" ]
            });
            var elem = document.getElementById("rss_here");
            for( var i=0; i < tree.rdf$RDF.item.length; i++ ) {
                var divtag = document.createElement( "div" );
                var atag = document.createElement( "a" );
                atag.href = tree.rdf$RDF.item[i].link;
                var title = tree.rdf$RDF.item[i].title;
                var tnode = document.createTextNode( title );
                atag.appendChild( tnode );
                divtag.appendChild( atag );
                elem.appendChild( divtag );
            }
        }
    });
</code></pre>

h3. XML-RPC using writeXML, prototype.js and parseDOM

If you wish to use prototype.js's Ajax.Request class by yourself:
<code><pre>
    var reqtree = ;
    $.ajax({
        type:"POST",
        url:"http://example.com/xmlrpc",
        data: $.js2xml({
            methodCall: {
                methodName: "weblogUpdates.ping",
                param: [
                    { value: "Kawa.net xp top page" },  // 1st param
                    { value: "http://www.kawa.net/" }   // 2nd param
                ]
            }
        }),
        processData:false,
        success: function( req ) {
            var resdom = req.responseXML.documentElement;
            // XML-DOM to JS-Object
            var restree = $.dom2js( resdom, {
                force_array: [ "member" ]
            } );   
            alert( restree.methodResponse.member[0] );
        }
    });
</code></pre>

h1. ORIGINAL AUTHOR Yusuke Kawasaki http://www.kawa.net/

h2. COPYRIGHT AND LICENSE

Copyright (c) 2005-2006 Yusuke Kawasaki. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the Artistic license. Or whatever license I choose,
which I will do instead of keeping this documentation like it is.

